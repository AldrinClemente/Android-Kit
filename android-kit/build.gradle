apply plugin: 'com.android.library'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName '0.6.2'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'commons-io:commons-io:2.5'
    compile('org.skyscreamer:jsonassert:1.3.0') {
        exclude group: 'org.json'
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

ext {
    projectName = 'Android Kit'
    projectDescription = 'A collection of useful classes and methods to make some development tasks easier'
    projectUrl = 'https://github.com/AldrinClemente/Android-Kit'
    projectRepo = 'https://github.com/AldrinClemente/Android-Kit.git'
    projectIssueTracker = 'https://github.com/AldrinClemente/Android-Kit/issues'

    projectLicenseName = 'The MIT License (MIT)'
    projectLicenseUrl = 'https://opensource.org/licenses/MIT'

    developerId = 'AldrinClemente'
    developerName = 'Aldrin Clemente'
    developerEmail = 'aldrinclemente@gmail.com'

    packageName = 'com.truebanana.androidkit'

    mavenGroupId = packageName
    mavenArtifactId = 'android-kit'

    bintrayUser = properties.getProperty('bintray.user')
    bintrayApiKey = properties.getProperty('bintray.apiKey')
    bintrayGpgPassphrase = properties.getProperty('bintray.gpg.passphrase')

    bintrayRepo = 'Libraries'
    bintrayName = 'Android-Kit'
    bintrayOrg = null

    bintrayLicenses = ['MIT']
    bintrayLabels = ['Android']

    bintrayGithubRepo = 'AldrinClemente/Android-Kit'
    bintrayGithubReleaseNotes = 'README.md'
}

// GitHub Maven
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

group = packageName
version = android.defaultConfig.versionName

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                groupId mavenGroupId
                artifactId mavenArtifactId

                name projectName
                description projectDescription
                url projectUrl

                licenses {
                    license {
                        name projectLicenseName
                        url projectLicenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection projectRepo
                    developerConnection projectRepo
                    url projectUrl
                }
            }
        }
    }
}

// Bintray
if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = bintrayUser
    key = bintrayApiKey

    configurations = ['archives']

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = false //[Default: false] Whether version should be auto published after an upload
    override = true //[Default: false] Whether to override version artifacts already published

    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayOrg
        desc = projectDescription
        websiteUrl = projectUrl
        issueTrackerUrl = projectIssueTracker
        vcsUrl = projectRepo
        licenses = bintrayLicenses
        labels = bintrayLabels
        publicDownloadNumbers = true
//        attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes

        githubRepo = bintrayGithubRepo //Optional Github repository
        githubReleaseNotesFile = bintrayGithubReleaseNotes //Optional Github readme file

        //Optional version descriptor
        version {
            name = android.defaultConfig.versionName //Bintray logical version name
//            desc = '' //Optional - Version-specific description'
//            released  = 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = android.defaultConfig.versionName
//            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes

            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = bintrayGpgPassphrase //Optional. The passphrase for GPG signing'
            }
        }
    }
}